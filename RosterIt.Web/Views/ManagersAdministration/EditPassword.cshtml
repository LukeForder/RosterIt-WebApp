@{
    ViewBag.Title = "Reset Password";
}

<a class="btn btn-default back-btn" href="@Url.Action("index", "ManagersAdministration")">
    <i class="fa fa-arrow-left"></i>
    back
</a>
<div class="container">
    <h2>
        <i class="fa fa-key"></i>
        (@Model.UserName) @Model.FullName
    </h2>
    <div class="well well-lg">
        <form>
            <fieldset>
                <legend>Enter new password</legend>

                <div class="form-group" data-bind="css: { 'has-error': hasError(password()) }">
                    <label for="password">Password</label>
                    <input type="password" class="form-control" id="password" placeholder="password" data-bind="value: password, valueUpdate: 'afterkeydown'" required>
                </div>

                <div class="form-group" data-bind="css: { 'has-error': hasError(passwordConfirmation()) }">
                    <label for="passwordConfirmation">Confirm password</label>
                    <input type="password" class="form-control" id="passwordConfirmation" placeholder="Re-enter new password" data-bind="value: passwordConfirmation, valueUpdate: 'afterkeydown'" required>
                </div>

                <div class="form-group">
                    <input type="submit" value="Reset" class="btn btn-primary" data-bind="click: onUpdate, enable: canUpdate" />
                </div>
            </fieldset>
        </form>
    </div>
</div>

@section scripts 
{
    <script src="~/Scripts/toastr.min.js"></script>
    <script src="~/Scripts/toastr.config.js"></script>
    <script src="~/Scripts/nprogress.min.js"></script>
    <script src="~/Scripts/knockout-3.0.0.js"></script>
    <script>

        var services = (function () {

            var updatePassword = function (password, passwordConfirmation) {
                toastr.info("Updating @Model.FullName's password.");
                return $.ajax(
                    '@Url.HttpRouteUrl("ApiChangePassword", new { id = Model.Id })',
                    {
                        type: 'PUT',
                        data: JSON.stringify({ Password: password, PasswordConfirmation: passwordConfirmation }),
                        contentType: 'application/json'
                    }).success(function () {
                        toastr.success('Password successfully updated.');
                    }).fail(function (response) {

                        var currentShowDuration = toastr.options.showDuration;
                        var currentTimeOut = toastr.options.timeOut;

                        toastr.options.showDuration = 1000;
                        toastr.options.timeOut = 9000;

                        try {
                            var responseText = response.responseText;
                            var json = JSON.parse(responseText);
                            var message = json.Reason || json.message || "Something went wrong while updating password.";
                            toastr.error(message);
                        }
                        catch (e) {
                            console.log(e);
                            var message = "Something went wrong while updating password.";
                            toastr.error(message);
                        }
                        finally {

                            toastr.options.showDuration = currentShowDuration;
                            toastr.options.timeOut = currentTimeOut;
                        }
                    });
            }

            return {
                updatePassword: updatePassword
            };
        })();

        var viewModel = {
            password: ko.observable(),
            passwordConfirmation: ko.observable()  
        };

        viewModel.onUpdate = function () {
            services.updatePassword(
                viewModel.password(),
                viewModel.passwordConfirmation()).success(function () {
                    viewModel.password(null);
                    viewModel.passwordConfirmation(null);
                });
        };

        viewModel.canUpdate = ko.computed(function () {
            var password = viewModel.password(),
                passwordConfirmation = viewModel.passwordConfirmation();

            return password && passwordConfirmation;
        });

        viewModel.hasError = function (val) {
            return val == true;
        };

        ko.applyBindings(viewModel);
    </script>
}